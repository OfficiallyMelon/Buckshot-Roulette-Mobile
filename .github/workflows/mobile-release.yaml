name: Release Godot (iOS + Android)

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: "Release name"
        required: true
      release_tag:
        description: "Release tag (e.g. v1.0.0)"
        required: true
      release_description:
        description: "Release description / changelog"
        required: true

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: macos-13
    env:
      GODOT_VERSION: "4.3"
      EXPORT_PRESET_IOS: "iOS"
      EXPORT_PRESET_ANDROID: "Android"
      EXPORT_DIR_IOS: "build/ios"
      EXPORT_DIR_ANDROID: "build/android"
      ARCHIVE_PATH: "build/App.xcarchive"
      IPA_NAME: "Buckshot-iOS-${{ github.sha }}.ipa"
      APK_NAME: "Buckshot-Android-${{ github.sha }}.apk"
      DEPLOYMENT_TARGET: "12.0"

    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install xcpretty
        run: sudo gem install xcpretty

      - name: Install Godot (headless) and templates
        run: |
          set -euxo pipefail
          mkdir -p tools/godot
          cd tools/godot
          curl -L -o godot.zip "https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_macos.universal.zip"
          unzip -q godot.zip
          mv Godot.app/Contents/MacOS/Godot Godot
          chmod +x Godot
          cd -
          TEMPLATES_DIR="$HOME/Library/Application Support/Godot/export_templates/${GODOT_VERSION}.stable"
          mkdir -p "${TEMPLATES_DIR}"
          curl -L -o templates.tpz "https://github.com/godotengine/godot-builds/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz"
          unzip -q templates.tpz -d templates_unpacked
          cp -R templates_unpacked/templates/* "${TEMPLATES_DIR}/"

      - name: Export iOS Xcode project
        run: |
          set -euxo pipefail
          mkdir -p "${EXPORT_DIR_IOS}"
          tools/godot/Godot --headless --path . --export-release "${EXPORT_PRESET_IOS}" "${EXPORT_DIR_IOS}"

      - name: Set iOS deployment target
        run: |
          set -euxo pipefail
          PROJ_BUNDLE="$(/usr/bin/find "${EXPORT_DIR_IOS}/../" -maxdepth 4 -type d -name '*.xcodeproj' -print -quit || true)"
          if [[ -z "${PROJ_BUNDLE}" ]]; then
            echo "No .xcodeproj found"
            exit 1
          fi
          echo "Using Xcode project: ${PROJ_BUNDLE}"
          PBX="${PROJ_BUNDLE}/project.pbxproj"
          perl -0777 -pe "s/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]+;/IPHONEOS_DEPLOYMENT_TARGET = ${DEPLOYMENT_TARGET};/g" -i "${PBX}"

      - name: Build .xcarchive (unsigned)
        run: |
          set -euxo pipefail
          PROJ_BUNDLE="$(/usr/bin/find "${EXPORT_DIR_IOS}/../" -maxdepth 4 -type d -name '*.xcodeproj' -print -quit)"
          SCHEME="$(xcodebuild -list -json -project "${PROJ_BUNDLE}" | /usr/bin/python3 -c 'import sys,json; d=json.load(sys.stdin); print(d["project"]["schemes"][0])')"
          xcodebuild \
            -project "${PROJ_BUNDLE}" \
            -scheme "${SCHEME}" \
            -configuration Release \
            -archivePath "${ARCHIVE_PATH}" \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            clean archive | xcpretty

      - name: Create .ipa (unsigned)
        run: |
          set -euxo pipefail
          APP_DIR="${ARCHIVE_PATH}/Products/Applications"
          APP_PATH="$(/usr/bin/find "${APP_DIR}" -maxdepth 1 -type d -name "*.app" -print -quit)"
          rm -rf Payload "${IPA_NAME}"
          mkdir -p Payload
          cp -R "${APP_PATH}" Payload/
          /usr/bin/ditto -c -k --sequesterRsrc --keepParent Payload "${IPA_NAME}"

      - name: Export Android APK
        run: |
          set -euxo pipefail
          mkdir -p "${EXPORT_DIR_ANDROID}"
          tools/godot/Godot --headless --path . --export-release "${EXPORT_PRESET_ANDROID}" "${APK_NAME}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.inputs.release_tag }}
          name: ${{ github.event.inputs.release_name }}
          body: ${{ github.event.inputs.release_description }}
          draft: false
          prerelease: false
          files: |
            ${{ env.IPA_NAME }}
            ${{ env.APK_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
